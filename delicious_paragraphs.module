<?php

/**
 * @file
 * Contains delicious_paragraphs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function delicious_paragraphs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the delicious_paragraphs module.
    case 'help.page.delicious_paragraphs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Default paragraphs for Delicious Creative websites.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function delicious_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__dp_cta' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__dp_image' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__dp_inline_gallery' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__dp_jumbotron' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__dp_table' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__dp_text' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__dp_video' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_cta_button_primary__dp_cta' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_cta_content__dp_cta' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_cta_heading__dp_cta' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_image__dp_image' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_inline_gallery_images__dp_inline_gallery' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_jumbotron_button_link__dp_jumbotron' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_jumbotron_headline__dp_jumbotron' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_jumbotron_message__dp_jumbotron' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_table__dp_table' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_text_text__dp_text' => [
      'base hook' => 'paragraph',
    ],
    'field__paragraph__field_dp_video__dp_video' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements template_preprocess_field().
 */
function delicious_paragraphs_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  
  // Output image size as selected image style.
  if ($element['#field_name'] == 'field_dp_image') {
    $size = $element['#object']->get('field_dp_image_size')->first()->getValue();
    foreach ($variables['items'] as $delta => $item) {
      $variables['items'][$delta]['content']['#image_style'] = $size['value'];
    }
  }

  // Autoplay videos.
  if ($element['#field_name'] == 'field_dp_video') {
    $autoplay = $element['#object']->get('field_dp_video_autoplay')->first()->getValue();
    foreach ($variables['items'] as $delta => $item) {
      $variables['items'][$delta]['content']['children']['#query']['autoplay'] = $autoplay['value'];
    }
  }

  // Change image size depending on gallery style selected.
  if ($element['#field_name'] == 'field_dp_inline_gallery_images') {
    $gallery_style = $element['#object']->get('field_dp_inline_gallery_style')->first()->getValue();
    $gallery_style = $gallery_style['value'];
    $variables['gallery_style'] = $gallery_style;
    $variables['formatter'] = $element['#formatter'];
    $image_style = 'dp_gallery_thumb_small';

    // Override image style for medium images.
    if ($gallery_style == 'dp-inline-gallery--columns-2') {
      $image_style = 'dp_gallery_thumb_medium';
    }

    // Set the image style.
    foreach ($variables['items'] as $delta => $item) {
      if (($gallery_style == 'dp-inline-gallery--large-left' || $gallery_style == 'dp-inline-gallery--large-right') && $element['#formatter'] == 'bootstrap_gallery_image_formatter') {
        foreach ($variables['items'][0]['content']['#images'] as $delta => $image) {
          if ($delta === 0) {
            $variables['items'][0]['content']['#images'][$delta]['thumb']['#image_style'] = 'dp_gallery_thumb_medium';
          }
        }
      }
      if ($gallery_style == 'dp-inline-gallery--columns-2' && $element['#formatter'] == 'bootstrap_gallery_image_formatter') {
        foreach ($variables['items'][0]['content']['#images'] as $delta => $image) {
          $variables['items'][0]['content']['#images'][$delta]['thumb']['#image_style'] = $image_style;
        }
      }
      else {
        if (($gallery_style == 'dp-inline-gallery--large-left' || $gallery_style == 'dp-inline-gallery--large-right') && $delta === 0) {
          $variables['items'][$delta]['content']['#image_style'] = 'dp_gallery_thumb_medium';
        }
        else {
          $variables['items'][$delta]['content']['#image_style'] = $image_style;
        }
      }
    }

    // Create new render element so we can swap it with bootstrap gallery data.
    $variables['images'] = $variables['items'];

    // Make bootstrap gallery image formatter work. Not a great approach but works for now.
    if ($element['#formatter'] == 'bootstrap_gallery_image_formatter') {
      $variables['modal'] = array(
        '#theme' => 'bootstrap_modal',
        '#close_button' => TRUE,
        '#title' => '&nbsp;',
        '#body_attributes' => array('class' => 'next'),
        '#footer' =>  array(
          'previous' => array(
            '#type' => 'button',
            '#value' => t('<i class="glyphicon glyphicon-chevron-left"></i> Previous'),
            '#attributes' => array('class' => array('prev')),
          ),
          'next' => array(
            '#type' => 'button',
            '#value' => t('Next <i class="glyphicon glyphicon-chevron-right"></i>'),
            '#attributes' => array('class' => array('next')),
          ),
        ),
      );

      $images = [];
      foreach ($variables['items'][0]['content']['#images'] as $delta => $image) {
        $images[$delta]['content']['#markup'] = '<a href="' . $image['url'] . '" title="' . $image['title'] . '" data-gallery>' . render($image['thumb']) . '</a>';
      }

      $variables['images'] = $images;
    }
  }
}
