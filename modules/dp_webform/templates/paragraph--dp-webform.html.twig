{#
/**
 * @file
 * Default theme implementation to display a paragraph in Delicious Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('dp_webform/dp-webform') }}
{{ attach_library('delicious_paragraphs/dp-background') }}

{% set display = content.field_dp_webform_display['#items'].getString() %}
{% set button_text = content.field_dp_webform_button_text['#items'].getString() %}
{% set bg_colour = content.field_dp_background['#items'].getString() %}
{% set width = content.field_dp_width['#items'].getString() %}
{%
set classes = [
  'dp-webform',
  width,
  bg_colour,
  'modal' == display ? 'text-center',
  'link' == display ? 'text-center',
]
%}

<div{{ attributes.addClass(classes) }}>
  {% if display == 'form' %}
    {{ content|without('field_dp_webform_display','field_dp_webform_button_text','field_dp_background','field_dp_width') }}
  {% elseif display == 'modal' %}
    {{ content.field_dp_webform_heading }}
    <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#modal-{{ form_id }}">
      {{ button_text }}
    </button>
    <div class="modal fade text-left" id="modal-{{ form_id }}" tabindex="-1" role="dialog" aria-labelledby="modal-label-{{ form_id }}">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            {% if content.field_dp_webform_heading|render is not empty %}
              <h4 class="modal-title" id="myModalLabel">{{ content.field_dp_webform_heading['#items'].getString() }}</h4>
            {% endif %}
          </div>
          <div class="modal-body">
            {{ content.field_dp_webform_webform }}
          </div>
        </div>
      </div>
    </div>
  {% elseif display == 'link' %}
    <a href="{{ webform_url }}" class="btn btn-primary btn-lg">{{ button_text }}</a>
  {% endif %}
</div>