{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('delicious_paragraphs/delicious-paragraphs') }}

{# Renders Alignment field. #}
{# Sets class name from values in database. #}
{% if content.field_dp_image_alignment|render %}
  {% set alignment = content.field_dp_image_alignment['#items'].getString() %}
  {% set alignment_classes = [
    'dp-image--left' == alignment ? 'dp-image--left',
    'dp-image--right' == alignment ? 'dp-image--right',
    'dp-image--center' == alignment ? 'dp-image--center',
  ]
  %}
{% endif %}

{# Renders Size field. #}
{# Sets class name based on selected image style. #}
{% if content.field_dp_image_size|render %}
  {% set size = content.field_dp_image_size['#items'].getString() %}
  {% set size_classes = [
    'dp_small' == size ? 'dp-image--small',
    'dp_medium' == size ? 'dp-image--medium',
    'dp_large' == size ? 'dp-image--large',
    'dp_full' == size ? 'dp-image--full',
  ]
  %}
{% endif %}

{# The template default set classes. #}
{%
set classes = [
  'dp-image',
]
%}

{# Merges Alignment field with classes. #}
{% set align_field = content.field_dp_image_alignment|render %}
{% if align_field %}
  {% set classes = classes|merge(alignment_classes) %}
{% endif %}

{# Merges Size field with classes. #}
{% set size_field = content.field_dp_image_size|render %}
{% if size_field %}
  {% set classes = classes|merge(size_classes) %}
{% endif %}

{# Prints div with classes, and content without Width and Background. #}
<figure{{ attributes.addClass(classes) }}>
  {{ title_suffix }}
  {% if content.field_dp_image_link|render is not empty %}
    <a href="{{ content.field_dp_image_link.0['#url'] }}">
  {% endif %}
    {{ content|without('field_dp_image_alignment', 'field_dp_image_size', 'field_dp_image_link', 'field_dp_image_title_caption') }}
  {% if content.field_dp_image_link|render is not empty %}
    </a>
  {% endif %}
  {% if paragraph.field_dp_image_title_caption.value %}
    <figcaption>
      {{ paragraph.field_dp_image.title }}
    </figcaption>
  {% endif %}
</figure>
